# Allows for faster key repetition
set -s escape-time 0

# Start numbering at 1
set -g base-index 1

# Replace C-b with c-a
set-option -g prefix C-a
unbind-key C-b
bind-key a send-prefix

bind-key C-a last-window

# hjkl pane traversal
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

set-window-option -g mode-keys vi

set -g default-terminal "screen-256color"

set -g status-bg colour33

set -g pane-border-style fg=colour33
# set -g pane-active-border-style fg=colour33
# set -g pane-active-border-style bg=default

set -g base-index 1

# Faster command sequences
set -s escape-time 0

setw -g aggressive-resize on

set-window-option -g mode-mouse on

# pane movement
bind-key J command-prompt -p "join pane from:"  "join-pane -s '%%'"
bind-key S command-prompt -p "send pane to:"  "join-pane -t '%%'"

set -g mouse-select-pane on

set-option -g allow-rename off

set-option -g renumber-windows on

set -g @tpm_plugins '           \
  tmux-plugins/tpm              \
  tmux-plugins/tmux-resurrect   \
  '

# Smart pane switching with awareness of vim splits
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"


# This tmux statusbar config was created by tmuxline.vim
# on Fri, 05 Dec 2014

set -g status-bg "colour234"
set -g message-command-fg "colour145"
set -g status-justify "left"
set -g status-left-length "100"
set -g status "on"
set -g pane-active-border-fg "colour25"
set -g message-bg "colour236"
set -g status-right-length "100"
set -g status-right-attr "none"
set -g message-fg "colour145"
set -g message-command-bg "colour236"
set -g status-attr "none"
set -g status-utf8 "on"
set -g pane-border-fg "colour236"
set -g status-left-attr "none"
setw -g window-status-fg "colour237"
setw -g window-status-attr "none"
setw -g window-status-activity-bg "colour234"
setw -g window-status-activity-attr "none"
setw -g window-status-activity-fg "colour25"
setw -g window-status-separator ""
setw -g window-status-bg "colour234"
set -g status-left "#[fg=colour195,bg=colour25,bold] #S #[fg=colour25,bg=colour234,nobold,nounderscore,noitalics]"
set -g status-right "#[fg=colour236,bg=colour234,nobold,nounderscore,noitalics]#[fg=colour145,bg=colour236] %Y-%m-%d | %H:%M #[fg=colour25,bg=colour236,nobold,nounderscore,noitalics]#[fg=colour195,bg=colour25] #h "
setw -g window-status-format "#[fg=colour237,bg=colour234] #I |#[fg=colour237,bg=colour234] #W "
setw -g window-status-current-format "#[fg=colour234,bg=colour236,nobold,nounderscore,noitalics]#[fg=colour145,bg=colour236] #I |#[fg=colour145,bg=colour236] #W #[fg=colour236,bg=colour234,nobold,nounderscore,noitalics]"


if-shell 'test "$(uname -s)" = Darwin' 'set-option -g default-command "exec reattach-to-user-namespace -l zsh"'
# Setup 'v' to begin selection as in Vim
bind-key -t vi-copy v begin-selection
if-shell 'test "$(uname -s)" = Darwin' 'bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"'
# Update default binding of `Enter` to also use copy-pipe
unbind -t vi-copy Enter
if-shell 'test "$(uname -s)" = Darwin' 'bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"'
