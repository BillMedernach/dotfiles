set encoding=utf-8
let mapleader=" "

" ******** Vundle ********
set nocompatible
filetype off
set rtp+=~/dotfiles/vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'rking/ag.vim'
nmap <leader>a :Ag 

Plugin 'kien/ctrlp.vim'
let g:ctrlp_map = '' " don't use default binding
nmap <leader>b :CtrlPBuffer<CR>
nmap <leader>f :CtrlP<CR>
nmap <leader>t :CtrlPBufTag<CR>
nmap <leader>l :CtrlPLine<CR>
let g:limelight_conceal_ctermfg = 'gray'
let g:limelight_conceal_ctermfg = 240

Plugin 'nanotech/jellybeans.vim'

Plugin 'itchyny/lightline.vim'
set laststatus=2

Plugin 'junegunn/goyo.vim'
Plugin 'junegunn/limelight.vim'
autocmd User GoyoEnter Limelight
autocmd User GoyoLeave Limelight!
nnoremap <Leader>G :Goyo<CR>

Plugin 'scrooloose/nerdtree'
map <leader>e :NERDTreeToggle<CR>

Plugin 'scrooloose/syntastic'

Plugin 'airblade/vim-gitgutter'

Bundle 'sickill/vim-pasta'

Plugin 'tpope/vim-commentary'

Bundle 'xolox/vim-misc'
Bundle 'xolox/vim-easytags'

Plugin 'nathanaelkane/vim-indent-guides'

Plugin 'tpope/vim-surround'

Plugin 'tpope/vim-repeat'


call vundle#end()
filetype plugin indent on
" ***********************

syntax on

colorscheme jellybeans

" whitespace
set nowrap                        " don't wrap lines
set tabstop=2                     " a tab is two spaces
set shiftwidth=2                  " an autoindent (with <<) is two spaces
set expandtab                     " use spaces, not tabs
set list                          " Show invisible characters
set backspace=indent,eol,start    " backspace through everything in insert mode

" List chars
set listchars=""                  " Reset the listchars
set listchars=tab:\ \             " a tab should display as "  ", trailing whitespace as "."
set listchars+=trail:.            " show trailing spaces as dots
set listchars+=extends:>          " The character to show in the last column when wrap is
                                  " off and the line continues beyond the right of the screen
set listchars+=precedes:<         " The character to show in the first column when wrap is
                                  " off and the line continues beyond the left of the screen

set smartindent

function s:setupWrapping()
  set wrap
  set wrapmargin=2
  set textwidth=80
endfunction


"" Commands for specific file types
if has("autocmd")
  " In Makefiles, use real tabs, not tabs expanded to spaces
  au FileType make set noexpandtab

  " Make sure all markdown files have the correct filetype set and setup wrapping
  au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn,txt} setf markdown | call s:setupWrapping()

  " Treat JSON files like JavaScript
  au BufNewFile,BufRead *.json set ft=javascript

  " make Python follow PEP8 ( http://www.python.org/dev/peps/pep-0008/ )
  au FileType python set softtabstop=4 tabstop=4 shiftwidth=4 textwidth=79

  " Remember last location in file, but not for commit messages.
  " see :help last-position-jump
  au BufReadPost * if &filetype !~ '^git\c' && line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g`\"" | endif

  " mark Jekyll YAML frontmatter as comment
  au BufNewFile,BufRead *.{md,markdown,html,xml} sy match Comment /\%^---\_.\{-}---$/
endif


"" Searching
set hlsearch                      " highlight matches
set incsearch                     " incremental searching
set ignorecase                    " searches are case insensitive...
set smartcase                     " ... unless they contain at least one capital letter
" clear the search buffer when hitting return
:nnoremap <CR> :nohlsearch<cr>

" Allow backgrounding buffers without writing them, and remember marks/undo
" for backgrounded buffers
set hidden

set mouse=a

set scrolloff=3

" Command to delete trailing whitespace
command! KillWhitespace :normal :%s/ *$//g<cr><c-o><cr>

" Expand %% to the current file's directory in command mode
cnoremap %% <C-R>=expand('%:h').'/'<cr>

" find git merge conflict markers
nmap <silent> <leader>cf <ESC>/\v^[<=>]{7}( .*\|$)<CR>

" don't beep, use visualbell
set noerrorbells visualbell t_vb=
if has('autocmd')
  autocmd GUIEnter * set visualbell t_vb=
endif


" Tilted window navigation
map <C-J> <C-W>j<C-W>_
map <C-k> <C-W>k<C-W>_
map <C-h> <C-W>h<C-W>_
map <C-l> <C-W>l<C-W>_

" Easier buffer naviation
map <leader>n :bn<cr>
map <leader>p :bp<cr>
map <leader>d :bd<cr>

set cc=80
" Toggle cc
function! g:ToggleColorColumn()
  if &colorcolumn != ''
    setlocal colorcolumn&
  else
    setlocal colorcolumn=+1
  endif
endfunction
nnoremap <silent> <leader>cc :call g:ToggleColorColumn()<CR>
" Turn off cc by default
call g:ToggleColorColumn()

